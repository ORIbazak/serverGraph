vector<float> Parser::find_intersects_with_x(const vector<float>& x, const vector<float>& y, const vector<bool>& defined,const vector<token>& exp)
{
	vector <float> x_vals;

	for (size_t i = 0; i < RANGE; i++)
	{
		if (defined[i])
		{
			size_t j =i;
			while (j + INTEGER_JUMP < RANGE && x[j] * x[j + INTEGER_JUMP]>0)
			{
				j+=JUMP;
			}
			if (j + JUMP > RANGE)
			{
				return x_vals;
			}
			float min = x[j];
			float x_val = find_x(min, exp, y[j]);
			if (x_val != X_MAX + 1) x_vals.push_back(x_val);
			i = j;

		}

	}
	return x_vals;
}



//INTERSECTS

vector<float>  Parser::find_x_intersects(const vector<float>& x, const vector<float>& y, const vector<bool>& DEFINED, vector<token> exp)
{
    vector<float> x_vals;
    int count = 0;
    for (int i = 0; i < RANGE-1; i++)
    {
        if (DEFINED[i]) {
            if ((y[i] <= 0.2 && y[i] >= 0) || (-0.2 <= y[i] && y[i] <= 0)) {
                switch (y[i] > 0) {
                case true: // case number is between 0 to 1

                    if (y[i + 1] < y[i])
                    {  // checks if next value is smaller
                        int j = i;

                        while (j < RANGE - 2 && y[j + 1] > 0 && y[j + 1] < y[j]) j++;  // if true, goes through ARR until find the smallest val
                        if (y[j] < 0.01)
                             x_vals.push_back(roundTo2DecimalPlaces(x[j]));   // if close enough to zero, pushes it as x intersect
                            else
                            {
                                float intersect = recurive_x_calcualte(x ,j, exp);
                                x_vals.push_back(roundTo2DecimalPlaces(intersect));

                            }// find intersects, pushes it to vector
                        while (y[j] > -0.2&&   y[j]<0.2)
                        {
                            j++;
                        }
                        i = j;
                    }
                    else {  // if the next value is bigger
                        if (y[i] < 0.01)
                        {

                             x_vals.push_back(roundTo2DecimalPlaces(x[i]));
                        }// if close enough to zero, pushes it as x intersect
                        else
                        {
                            float intersect = recurive_x_calcualte(x, i, exp);
                            x_vals.push_back(roundTo2DecimalPlaces(intersect)); 
                        }

                        // if not, finds intersect and pushes it to vector
                    }
                    break;


                case false:

                    if (y[i] == 0)
                    {
                        x_vals.push_back(x[i]);
                    }
                    else {
                        if (y[i + 1] > y[i]) {  // if next value is bigger
                            int j = i;
                            while (j < RANGE - 1 && y[j + 1] < 0 && y[j + 1] > y[j])
                                j++;  // if true, goes through ARR until find the smallest val
                            if (y[j] > -0.01)
                            {
                               
                                    x_vals.push_back(x[j]);
                            }// if close enough to 9zero, pushes it as x intersect
                            else
                            {
                                float intersect = recurive_x_calcualte(x, j, exp);

                                  x_vals.push_back(intersect); 
                                // find intersects, pushes it to vector

                            }
                            while (y[j] > -X_INTERSECT_FLAG && y[j] < X_INTERSECT_FLAG)
                            {
                                j++;
                            }
                            i = j;
                        }
                        else {  // if the next value is smaller
                            if (y[i] > -0.01)
                                 x_vals.push_back(x[i]); // if close enough to zero, pushes it as x intersect
                                else
                                {
                                    float intersect = recurive_x_calcualte(x, i, exp);

                                    x_vals.push_back(intersect);   // if not, finds intersect and pushes it to vector
                                }
                        }
                    }
                    break;

                }
            }
        }
    }

    return x_vals;
}